/* DO NOT EDIT!  Automatically generated by misc/gen-printf.h.pl */
/*
 * Copyright (c) 2014 DeNA Co., Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
#ifndef qrintf_h
#define qrintf_h

#ifdef __cplusplus
extern "C" {
#endif

#include <limits.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <assert.h>

#undef sprintf
#define sprintf(...) _qp_sprintf(__VA_ARGS__)
#undef snprintf
#define snprintf(...) _qp_snprintf(__VA_ARGS__)

#if _QRINTF_COUNT_CALL
extern size_t _qrintf_call_cnt;
#endif

typedef struct qrintf_nck_t {
    char *str;
    size_t off;
} qrintf_nck_t;

typedef struct qrintf_chk_t {
    char *str;
    size_t off;
    size_t size;
} qrintf_chk_t;

static inline qrintf_nck_t _qrintf_nck_init(char *str)
{
    qrintf_nck_t ctx;
    ctx.str = str;
    ctx.off = 0;
#if _QRINTF_COUNT_CALL
    ++_qrintf_call_cnt;
#endif
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_init(char *str, size_t size)
{
    qrintf_chk_t ctx;
    ctx.str = str;
    ctx.off = 0;
    ctx.size = size;
#if _QRINTF_COUNT_CALL
    ++_qrintf_call_cnt;
#endif
    return ctx;
}

static inline int _qrintf_nck_finalize(qrintf_nck_t ctx)
{
    ctx.str[ctx.off] = '\0';
    return (int)ctx.off;
}

static inline int _qrintf_chk_finalize(qrintf_chk_t ctx)
{
    ctx.str[ctx.off < ctx.size ? ctx.off : ctx.size - 1] = '\0';
    return (int)ctx.off;
}

static inline qrintf_nck_t _qrintf_nck_s_len(qrintf_nck_t ctx, const char *s, size_t l)
{
    for (; l != 0; --l)
        ctx.str[ctx.off++] = *s++;
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_s_len(qrintf_chk_t ctx, const char *s, size_t l)
{
    size_t off = ctx.off;
    ctx.off += l;
    if (off + l <= ctx.size) {
    } else if (off < ctx.size) {
        l = ctx.size - off;
    } else {
        goto Exit;
    }
    for (; l != 0; --l)
        ctx.str[off++] = *s++;
Exit:
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_fill(qrintf_nck_t ctx, int ch, size_t len, int width)
{
    for (; len < width; --width)
        ctx.str[ctx.off++] = ch;
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_fill(qrintf_chk_t ctx, int ch, size_t len, int width)
{
    if (len < width) {
        size_t off = ctx.off, l = width - len;
        ctx.off += l;
        if (off + l <= ctx.size) {
        } else if (off < ctx.size) {
            l = ctx.size - off;
        } else {
            goto Exit;
        }
        for (; l != 0; --l)
            ctx.str[off++] = ch;
    }
Exit:
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_s(qrintf_nck_t ctx, const char *s)
{
    for (; *s != '\0'; ++s)
        ctx.str[ctx.off++] = *s;
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_s(qrintf_chk_t ctx, const char *s)
{
    return _qrintf_chk_s_len(ctx, s, strlen(s));
}

static inline qrintf_nck_t _qrintf_nck_c(qrintf_nck_t ctx, int c)
{
    ctx.str[ctx.off++] = c;
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_c(qrintf_nck_t ctx, int fill_ch, int width, int c)
{
    ctx = _qrintf_nck_fill(ctx, fill_ch, 1, width);
    ctx.str[ctx.off++] = c;
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_s(qrintf_nck_t ctx, int fill_ch, int width, const char *s)
{
    int slen = strlen(s);
    ctx = _qrintf_nck_fill(ctx, fill_ch, slen, width);
    return _qrintf_nck_s_len(ctx, s, slen);
}
static inline qrintf_chk_t _qrintf_chk_c(qrintf_chk_t ctx, int c)
{
    do { int ch = c; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_c(qrintf_chk_t ctx, int fill_ch, int width, int c)
{
    ctx = _qrintf_chk_fill(ctx, fill_ch, 1, width);
    do { int ch = c; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_s(qrintf_chk_t ctx, int fill_ch, int width, const char *s)
{
    int slen = strlen(s);
    ctx = _qrintf_chk_fill(ctx, fill_ch, slen, width);
    return _qrintf_chk_s_len(ctx, s, slen);
}

static inline const char *_qrintf_get_digit_table(void)
{
    static const char digits_table[] = {
        "00010203040506070809"
        "10111213141516171819"
        "20212223242526272829"
        "30313233343536373839"
        "40414243444546474849"
        "50515253545556575859"
        "60616263646566676869"
        "70717273747576777879"
        "80818283848586878889"
        "90919293949596979899"
    };
    return digits_table;
}

static inline unsigned _qrintf_ilog10ull(unsigned long long v)
{
#define LOG2(N) ((unsigned)((sizeof(long long) * 8) - __builtin_clzll((N)-1)))
    /* from http://graphics.stanford.edu/~seander/bithacks.html#IntegerLog10 */
    static const unsigned long long ilog10table[] = {
        1ULL,
        10ULL,
        100ULL,
        1000ULL,
        10000ULL,
        100000ULL,
        1000000ULL,
        10000000ULL,
        100000000ULL,
        1000000000ULL,
        10000000000ULL,
        100000000000ULL,
        1000000000000ULL,
        10000000000000ULL,
        100000000000000ULL,
        1000000000000000ULL,
        10000000000000000ULL,
        100000000000000000ULL,
        1000000000000000000ULL,
        10000000000000000000ULL,
        ULLONG_MAX,
    };
    if (v != 0) {
        unsigned t;
        assert(sizeof(long long) == 8);
        t = ((LOG2(v) + 1) * 1233) / 4096;
        return t + (v >= ilog10table[t]);
    }
    else {
        return 1;
    }
#undef LOG2
}

static inline void _qrintf_int_core(char *p, unsigned long long val)
{
    const char *digits = _qrintf_get_digit_table();
    while (val >= 100) {
        unsigned idx = val % 100 * 2;
        *--p = digits[idx + 1];
        *--p = digits[idx];
        val /= 100;
    }
    if (val < 10) {
        *--p = '0' + val;
    } else {
        *--p = digits[val * 2 + 1];
        *--p = digits[val * 2];
    }
}

static inline qrintf_nck_t _qrintf_nck_int_core(qrintf_nck_t ctx, int fill_ch, int width, unsigned long long v, int sign)
{
    unsigned long long val = (unsigned long long) v;
    int len = _qrintf_ilog10ull(val);
    int wlen = len;
    if (fill_ch == ' ') {
        ctx = _qrintf_nck_fill(ctx, fill_ch, len + sign, width);
    }
    if (sign) {
        ctx.str[ctx.off++] = '-';
        width -= 1;
    }
    if (fill_ch == '0') {
        ctx = _qrintf_nck_fill(ctx, fill_ch, len, width);
    }

    _qrintf_int_core(ctx.str + ctx.off + wlen, val);
    ctx.off += len;
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_int_core(qrintf_chk_t ctx, int fill_ch, int width, unsigned long long v, int sign)
{
    unsigned long long val = (unsigned long long) v;
    int len = _qrintf_ilog10ull(val);
    int wlen = len;
    if (ctx.off + wlen + sign > ctx.size) {
        int n = ctx.off + wlen + sign - ctx.size - 1;
        wlen -= n;
        while (n-- != 0) {
            val /= 10;
        }
    }
    if (fill_ch == ' ') {
        ctx = _qrintf_chk_fill(ctx, fill_ch, len + sign, width);
    }
    if (sign && ctx.off + 1 < ctx.size) {
        ctx.str[ctx.off++] = '-';
        width -= 1;
    }
    if (fill_ch == '0') {
        ctx = _qrintf_chk_fill(ctx, fill_ch, len, width);
    }

    _qrintf_int_core(ctx.str + ctx.off + wlen, val);
    ctx.off += len;
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_hd(qrintf_nck_t ctx, short v)
{
    unsigned long long val = v;
    int sign = v < 0;
    if (v < 0) {
        if (v == SHRT_MIN) {
            val = (unsigned long long)(SHRT_MAX) + 1;
        } else {
            val = (unsigned long long)(-v);
        }
    }
    return _qrintf_nck_int_core(ctx, 0, 0, val, sign);
}

static inline qrintf_nck_t _qrintf_nck_width_hd(qrintf_nck_t ctx, int fill_ch, int width, short v)
{
    unsigned long long val = v;
    int sign = v < 0;
    if (v < 0) {
        if (v == SHRT_MIN) {
            val = (unsigned long long)(SHRT_MAX) + 1;
        } else {
            val = (unsigned long long)(-v);
        }
    }
    return _qrintf_nck_int_core(ctx, fill_ch, width, val, sign);
}

static inline qrintf_nck_t _qrintf_nck_d(qrintf_nck_t ctx, int v)
{
    unsigned long long val = v;
    int sign = v < 0;
    if (v < 0) {
        if (v == INT_MIN) {
            val = (unsigned long long)(INT_MAX) + 1;
        } else {
            val = (unsigned long long)(-v);
        }
    }
    return _qrintf_nck_int_core(ctx, 0, 0, val, sign);
}

static inline qrintf_nck_t _qrintf_nck_width_d(qrintf_nck_t ctx, int fill_ch, int width, int v)
{
    unsigned long long val = v;
    int sign = v < 0;
    if (v < 0) {
        if (v == INT_MIN) {
            val = (unsigned long long)(INT_MAX) + 1;
        } else {
            val = (unsigned long long)(-v);
        }
    }
    return _qrintf_nck_int_core(ctx, fill_ch, width, val, sign);
}

static inline qrintf_nck_t _qrintf_nck_ld(qrintf_nck_t ctx, long v)
{
    unsigned long long val = v;
    int sign = v < 0;
    if (v < 0) {
        if (v == LONG_MIN) {
            val = (unsigned long long)(LONG_MAX) + 1;
        } else {
            val = (unsigned long long)(-v);
        }
    }
    return _qrintf_nck_int_core(ctx, 0, 0, val, sign);
}

static inline qrintf_nck_t _qrintf_nck_width_ld(qrintf_nck_t ctx, int fill_ch, int width, long v)
{
    unsigned long long val = v;
    int sign = v < 0;
    if (v < 0) {
        if (v == LONG_MIN) {
            val = (unsigned long long)(LONG_MAX) + 1;
        } else {
            val = (unsigned long long)(-v);
        }
    }
    return _qrintf_nck_int_core(ctx, fill_ch, width, val, sign);
}

static inline qrintf_nck_t _qrintf_nck_lld(qrintf_nck_t ctx, long long v)
{
    unsigned long long val = v;
    int sign = v < 0;
    if (v < 0) {
        if (v == LLONG_MIN) {
            val = (unsigned long long)(LLONG_MAX) + 1;
        } else {
            val = (unsigned long long)(-v);
        }
    }
    return _qrintf_nck_int_core(ctx, 0, 0, val, sign);
}

static inline qrintf_nck_t _qrintf_nck_width_lld(qrintf_nck_t ctx, int fill_ch, int width, long long v)
{
    unsigned long long val = v;
    int sign = v < 0;
    if (v < 0) {
        if (v == LLONG_MIN) {
            val = (unsigned long long)(LLONG_MAX) + 1;
        } else {
            val = (unsigned long long)(-v);
        }
    }
    return _qrintf_nck_int_core(ctx, fill_ch, width, val, sign);
}


static inline qrintf_nck_t _qrintf_nck_hu(qrintf_nck_t ctx, unsigned short v)
{
    return _qrintf_nck_int_core(ctx, 0, 0, (unsigned long long)v, 0);
}

static inline qrintf_nck_t _qrintf_nck_width_hu(qrintf_nck_t ctx, int fill_ch, int width, unsigned short v)
{
    return _qrintf_nck_int_core(ctx, fill_ch, width, (unsigned long long)v, 0);
}


static inline qrintf_nck_t _qrintf_nck_u(qrintf_nck_t ctx, unsigned v)
{
    return _qrintf_nck_int_core(ctx, 0, 0, (unsigned long long)v, 0);
}

static inline qrintf_nck_t _qrintf_nck_width_u(qrintf_nck_t ctx, int fill_ch, int width, unsigned v)
{
    return _qrintf_nck_int_core(ctx, fill_ch, width, (unsigned long long)v, 0);
}


static inline qrintf_nck_t _qrintf_nck_lu(qrintf_nck_t ctx, unsigned long v)
{
    return _qrintf_nck_int_core(ctx, 0, 0, (unsigned long long)v, 0);
}

static inline qrintf_nck_t _qrintf_nck_width_lu(qrintf_nck_t ctx, int fill_ch, int width, unsigned long v)
{
    return _qrintf_nck_int_core(ctx, fill_ch, width, (unsigned long long)v, 0);
}


static inline qrintf_nck_t _qrintf_nck_llu(qrintf_nck_t ctx, unsigned long long v)
{
    return _qrintf_nck_int_core(ctx, 0, 0, (unsigned long long)v, 0);
}

static inline qrintf_nck_t _qrintf_nck_width_llu(qrintf_nck_t ctx, int fill_ch, int width, unsigned long long v)
{
    return _qrintf_nck_int_core(ctx, fill_ch, width, (unsigned long long)v, 0);
}


static inline qrintf_nck_t _qrintf_nck_zu(qrintf_nck_t ctx, size_t v)
{
    return _qrintf_nck_int_core(ctx, 0, 0, (unsigned long long)v, 0);
}

static inline qrintf_nck_t _qrintf_nck_width_zu(qrintf_nck_t ctx, int fill_ch, int width, size_t v)
{
    return _qrintf_nck_int_core(ctx, fill_ch, width, (unsigned long long)v, 0);
}

static inline qrintf_nck_t _qrintf_nck_hx(qrintf_nck_t ctx, unsigned short v, const char *chars)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned short) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned short) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = chars[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_x(qrintf_nck_t ctx, unsigned v, const char *chars)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = chars[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_lx(qrintf_nck_t ctx, unsigned long v, const char *chars)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned long) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned long) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = chars[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_llx(qrintf_nck_t ctx, unsigned long long v, const char *chars)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned long long) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned long long) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = chars[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_zx(qrintf_nck_t ctx, size_t v, const char *chars)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(size_t) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(size_t) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = chars[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_hx(qrintf_nck_t ctx, int fill_ch, int width, unsigned short v, const char *chars)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned short) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned short) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    ctx = _qrintf_nck_fill(ctx, fill_ch, len, width);
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = chars[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_x(qrintf_nck_t ctx, int fill_ch, int width, unsigned v, const char *chars)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    ctx = _qrintf_nck_fill(ctx, fill_ch, len, width);
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = chars[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_lx(qrintf_nck_t ctx, int fill_ch, int width, unsigned long v, const char *chars)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned long) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned long) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    ctx = _qrintf_nck_fill(ctx, fill_ch, len, width);
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = chars[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_llx(qrintf_nck_t ctx, int fill_ch, int width, unsigned long long v, const char *chars)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned long long) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned long long) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    ctx = _qrintf_nck_fill(ctx, fill_ch, len, width);
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = chars[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_zx(qrintf_nck_t ctx, int fill_ch, int width, size_t v, const char *chars)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(size_t) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(size_t) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    ctx = _qrintf_nck_fill(ctx, fill_ch, len, width);
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = chars[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_hd(qrintf_chk_t ctx, short v)
{
    unsigned long long val = v;
    int sign = v < 0;
    if (v < 0) {
        if (v == SHRT_MIN) {
            val = (unsigned long long)(SHRT_MAX) + 1;
        } else {
            val = (unsigned long long)(-v);
        }
    }
    return _qrintf_chk_int_core(ctx, 0, 0, val, sign);
}

static inline qrintf_chk_t _qrintf_chk_width_hd(qrintf_chk_t ctx, int fill_ch, int width, short v)
{
    unsigned long long val = v;
    int sign = v < 0;
    if (v < 0) {
        if (v == SHRT_MIN) {
            val = (unsigned long long)(SHRT_MAX) + 1;
        } else {
            val = (unsigned long long)(-v);
        }
    }
    return _qrintf_chk_int_core(ctx, fill_ch, width, val, sign);
}

static inline qrintf_chk_t _qrintf_chk_d(qrintf_chk_t ctx, int v)
{
    unsigned long long val = v;
    int sign = v < 0;
    if (v < 0) {
        if (v == INT_MIN) {
            val = (unsigned long long)(INT_MAX) + 1;
        } else {
            val = (unsigned long long)(-v);
        }
    }
    return _qrintf_chk_int_core(ctx, 0, 0, val, sign);
}

static inline qrintf_chk_t _qrintf_chk_width_d(qrintf_chk_t ctx, int fill_ch, int width, int v)
{
    unsigned long long val = v;
    int sign = v < 0;
    if (v < 0) {
        if (v == INT_MIN) {
            val = (unsigned long long)(INT_MAX) + 1;
        } else {
            val = (unsigned long long)(-v);
        }
    }
    return _qrintf_chk_int_core(ctx, fill_ch, width, val, sign);
}

static inline qrintf_chk_t _qrintf_chk_ld(qrintf_chk_t ctx, long v)
{
    unsigned long long val = v;
    int sign = v < 0;
    if (v < 0) {
        if (v == LONG_MIN) {
            val = (unsigned long long)(LONG_MAX) + 1;
        } else {
            val = (unsigned long long)(-v);
        }
    }
    return _qrintf_chk_int_core(ctx, 0, 0, val, sign);
}

static inline qrintf_chk_t _qrintf_chk_width_ld(qrintf_chk_t ctx, int fill_ch, int width, long v)
{
    unsigned long long val = v;
    int sign = v < 0;
    if (v < 0) {
        if (v == LONG_MIN) {
            val = (unsigned long long)(LONG_MAX) + 1;
        } else {
            val = (unsigned long long)(-v);
        }
    }
    return _qrintf_chk_int_core(ctx, fill_ch, width, val, sign);
}

static inline qrintf_chk_t _qrintf_chk_lld(qrintf_chk_t ctx, long long v)
{
    unsigned long long val = v;
    int sign = v < 0;
    if (v < 0) {
        if (v == LLONG_MIN) {
            val = (unsigned long long)(LLONG_MAX) + 1;
        } else {
            val = (unsigned long long)(-v);
        }
    }
    return _qrintf_chk_int_core(ctx, 0, 0, val, sign);
}

static inline qrintf_chk_t _qrintf_chk_width_lld(qrintf_chk_t ctx, int fill_ch, int width, long long v)
{
    unsigned long long val = v;
    int sign = v < 0;
    if (v < 0) {
        if (v == LLONG_MIN) {
            val = (unsigned long long)(LLONG_MAX) + 1;
        } else {
            val = (unsigned long long)(-v);
        }
    }
    return _qrintf_chk_int_core(ctx, fill_ch, width, val, sign);
}


static inline qrintf_chk_t _qrintf_chk_hu(qrintf_chk_t ctx, unsigned short v)
{
    return _qrintf_chk_int_core(ctx, 0, 0, (unsigned long long)v, 0);
}

static inline qrintf_chk_t _qrintf_chk_width_hu(qrintf_chk_t ctx, int fill_ch, int width, unsigned short v)
{
    return _qrintf_chk_int_core(ctx, fill_ch, width, (unsigned long long)v, 0);
}


static inline qrintf_chk_t _qrintf_chk_u(qrintf_chk_t ctx, unsigned v)
{
    return _qrintf_chk_int_core(ctx, 0, 0, (unsigned long long)v, 0);
}

static inline qrintf_chk_t _qrintf_chk_width_u(qrintf_chk_t ctx, int fill_ch, int width, unsigned v)
{
    return _qrintf_chk_int_core(ctx, fill_ch, width, (unsigned long long)v, 0);
}


static inline qrintf_chk_t _qrintf_chk_lu(qrintf_chk_t ctx, unsigned long v)
{
    return _qrintf_chk_int_core(ctx, 0, 0, (unsigned long long)v, 0);
}

static inline qrintf_chk_t _qrintf_chk_width_lu(qrintf_chk_t ctx, int fill_ch, int width, unsigned long v)
{
    return _qrintf_chk_int_core(ctx, fill_ch, width, (unsigned long long)v, 0);
}


static inline qrintf_chk_t _qrintf_chk_llu(qrintf_chk_t ctx, unsigned long long v)
{
    return _qrintf_chk_int_core(ctx, 0, 0, (unsigned long long)v, 0);
}

static inline qrintf_chk_t _qrintf_chk_width_llu(qrintf_chk_t ctx, int fill_ch, int width, unsigned long long v)
{
    return _qrintf_chk_int_core(ctx, fill_ch, width, (unsigned long long)v, 0);
}


static inline qrintf_chk_t _qrintf_chk_zu(qrintf_chk_t ctx, size_t v)
{
    return _qrintf_chk_int_core(ctx, 0, 0, (unsigned long long)v, 0);
}

static inline qrintf_chk_t _qrintf_chk_width_zu(qrintf_chk_t ctx, int fill_ch, int width, size_t v)
{
    return _qrintf_chk_int_core(ctx, fill_ch, width, (unsigned long long)v, 0);
}

static inline qrintf_chk_t _qrintf_chk_hx(qrintf_chk_t ctx, unsigned short v, const char *chars)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned short) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned short) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = chars[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_x(qrintf_chk_t ctx, unsigned v, const char *chars)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = chars[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_lx(qrintf_chk_t ctx, unsigned long v, const char *chars)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned long) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned long) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = chars[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_llx(qrintf_chk_t ctx, unsigned long long v, const char *chars)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned long long) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned long long) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = chars[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_zx(qrintf_chk_t ctx, size_t v, const char *chars)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(size_t) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(size_t) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = chars[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_hx(qrintf_chk_t ctx, int fill_ch, int width, unsigned short v, const char *chars)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned short) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned short) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    ctx = _qrintf_chk_fill(ctx, fill_ch, len, width);
    len *= 4;
    do {
        len -= 4;
        do { int ch = chars[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_x(qrintf_chk_t ctx, int fill_ch, int width, unsigned v, const char *chars)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    ctx = _qrintf_chk_fill(ctx, fill_ch, len, width);
    len *= 4;
    do {
        len -= 4;
        do { int ch = chars[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_lx(qrintf_chk_t ctx, int fill_ch, int width, unsigned long v, const char *chars)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned long) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned long) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    ctx = _qrintf_chk_fill(ctx, fill_ch, len, width);
    len *= 4;
    do {
        len -= 4;
        do { int ch = chars[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_llx(qrintf_chk_t ctx, int fill_ch, int width, unsigned long long v, const char *chars)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned long long) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned long long) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    ctx = _qrintf_chk_fill(ctx, fill_ch, len, width);
    len *= 4;
    do {
        len -= 4;
        do { int ch = chars[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_zx(qrintf_chk_t ctx, int fill_ch, int width, size_t v, const char *chars)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(size_t) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(size_t) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    ctx = _qrintf_chk_fill(ctx, fill_ch, len, width);
    len *= 4;
    do {
        len -= 4;
        do { int ch = chars[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}


#ifdef __cplusplus
}
#endif

#endif
