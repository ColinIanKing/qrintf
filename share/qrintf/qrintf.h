/* DO NOT EDIT!  Automatically generated by misc/gen-printf.h.pl */
/*
 * Copyright (c) 2014 DeNA Co., Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
#ifndef qrintf_h
#define qrintf_h

#ifdef __cplusplus
extern "C" {
#endif

#include <limits.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>

#undef sprintf
#define sprintf _qp_sprintf
#undef snprintf
#define snprintf _qp_snprintf

#if _QRINTF_COUNT_CALL
extern size_t _qrintf_call_cnt;
#endif

typedef struct qrintf_nck_t {
    char *str;
    size_t off;
} qrintf_nck_t;

typedef struct qrintf_chk_t {
    char *str;
    size_t off;
    size_t size;
} qrintf_chk_t;

static inline qrintf_nck_t _qrintf_nck_init(char *str)
{
    qrintf_nck_t ctx;
    ctx.str = str;
    ctx.off = 0;
#if _QRINTF_COUNT_CALL
    ++_qrintf_call_cnt;
#endif
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_init(char *str, size_t size)
{
    qrintf_chk_t ctx;
    ctx.str = str;
    ctx.off = 0;
    ctx.size = size;
#if _QRINTF_COUNT_CALL
    ++_qrintf_call_cnt;
#endif
    return ctx;
}

static inline int _qrintf_nck_finalize(qrintf_nck_t ctx)
{
    ctx.str[ctx.off] = '\0';
    return (int)ctx.off;
}

static inline int _qrintf_chk_finalize(qrintf_chk_t ctx)
{
    ctx.str[ctx.off < ctx.size ? ctx.off : ctx.size - 1] = '\0';
    return (int)ctx.off;
}

static inline qrintf_nck_t _qrintf_nck_c(qrintf_nck_t ctx, int c)
{
    ctx.str[ctx.off++] = c;
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_c(qrintf_nck_t ctx, int fill_ch, int width, int c)
{
    for (; 1 < width; --width) {
        ctx.str[ctx.off++] = fill_ch;
    }
    ctx.str[ctx.off++] = c;
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_s(qrintf_nck_t ctx, const char *s)
{
    for (; *s != '\0'; ++s) {
        ctx.str[ctx.off++] = *s;
    }
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_s(qrintf_nck_t ctx, int fill_ch, int width, const char *s)
{
    int slen = strlen(s);
    for (; slen < width; --width) {
        ctx.str[ctx.off++] = fill_ch;
    }
    for (; slen != 0; --slen) {
        ctx.str[ctx.off++] = *s++;
    }
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_s_len(qrintf_nck_t ctx, const char *s, size_t l)
{
    for (; l != 0; --l) {
        ctx.str[ctx.off++] = *s++;
    }
    return ctx;
}
static inline qrintf_chk_t _qrintf_chk_c(qrintf_chk_t ctx, int c)
{
    do { int ch = c; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_c(qrintf_chk_t ctx, int fill_ch, int width, int c)
{
    for (; 1 < width; --width) {
        do { int ch = fill_ch; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    }
    do { int ch = c; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_s(qrintf_chk_t ctx, const char *s)
{
    for (; *s != '\0'; ++s) {
        do { int ch = *s; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    }
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_s(qrintf_chk_t ctx, int fill_ch, int width, const char *s)
{
    int slen = strlen(s);
    for (; slen < width; --width) {
        do { int ch = fill_ch; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    }
    for (; slen != 0; --slen) {
        do { int ch = *s++; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    }
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_s_len(qrintf_chk_t ctx, const char *s, size_t l)
{
    for (; l != 0; --l) {
        do { int ch = *s++; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    }
    return ctx;
}

static inline char *_qrintf_hd_core(char *p, short v)
{
    if (v < 0) {
        if (v == SHRT_MIN) {
            *--p = '1' + SHRT_MAX % 10;
            v = SHRT_MAX / 10;
        } else {
            v = -v;
        }
    }
    do {
        *--p = '0' + v % 10;
    } while ((v /= 10) != 0);
    return p;
}

static inline qrintf_nck_t _qrintf_nck_hd(qrintf_nck_t ctx, short v)
{
    char buf[sizeof(short) * 3], *p;
    if (v < 0) {
        ctx.str[ctx.off++] = '-';
    }
    p = _qrintf_hd_core(buf + sizeof(buf), v);
    do {
        ctx.str[ctx.off++] = *p++;
    } while (p != buf + sizeof(buf));
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_hd(qrintf_nck_t ctx, int fill_ch, int width, short v)
{
    char buf[sizeof(short) * 3 + 1], *p = _qrintf_hd_core(buf + sizeof(buf), v);
    int len;
    if (v < 0) {
        if (fill_ch == ' ') {
            *--p = '-';
        } else {
            ctx.str[ctx.off++] = '-';
            --width;
        }
    }
    len = buf + sizeof(buf) - p;
    for (; len < width; --width) {
        ctx.str[ctx.off++] = fill_ch;
    }
    do {
        ctx.str[ctx.off++] = *p++;
    } while (p != buf + sizeof(buf));
    return ctx;
}

static inline char *_qrintf_d_core(char *p, int v)
{
    if (v < 0) {
        if (v == INT_MIN) {
            *--p = '1' + INT_MAX % 10;
            v = INT_MAX / 10;
        } else {
            v = -v;
        }
    }
    do {
        *--p = '0' + v % 10;
    } while ((v /= 10) != 0);
    return p;
}

static inline qrintf_nck_t _qrintf_nck_d(qrintf_nck_t ctx, int v)
{
    char buf[sizeof(int) * 3], *p;
    if (v < 0) {
        ctx.str[ctx.off++] = '-';
    }
    p = _qrintf_d_core(buf + sizeof(buf), v);
    do {
        ctx.str[ctx.off++] = *p++;
    } while (p != buf + sizeof(buf));
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_d(qrintf_nck_t ctx, int fill_ch, int width, int v)
{
    char buf[sizeof(int) * 3 + 1], *p = _qrintf_d_core(buf + sizeof(buf), v);
    int len;
    if (v < 0) {
        if (fill_ch == ' ') {
            *--p = '-';
        } else {
            ctx.str[ctx.off++] = '-';
            --width;
        }
    }
    len = buf + sizeof(buf) - p;
    for (; len < width; --width) {
        ctx.str[ctx.off++] = fill_ch;
    }
    do {
        ctx.str[ctx.off++] = *p++;
    } while (p != buf + sizeof(buf));
    return ctx;
}

static inline char *_qrintf_ld_core(char *p, long v)
{
    if (v < 0) {
        if (v == LONG_MIN) {
            *--p = '1' + LONG_MAX % 10;
            v = LONG_MAX / 10;
        } else {
            v = -v;
        }
    }
    do {
        *--p = '0' + v % 10;
    } while ((v /= 10) != 0);
    return p;
}

static inline qrintf_nck_t _qrintf_nck_ld(qrintf_nck_t ctx, long v)
{
    char buf[sizeof(long) * 3], *p;
    if (v < 0) {
        ctx.str[ctx.off++] = '-';
    }
    p = _qrintf_ld_core(buf + sizeof(buf), v);
    do {
        ctx.str[ctx.off++] = *p++;
    } while (p != buf + sizeof(buf));
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_ld(qrintf_nck_t ctx, int fill_ch, int width, long v)
{
    char buf[sizeof(long) * 3 + 1], *p = _qrintf_ld_core(buf + sizeof(buf), v);
    int len;
    if (v < 0) {
        if (fill_ch == ' ') {
            *--p = '-';
        } else {
            ctx.str[ctx.off++] = '-';
            --width;
        }
    }
    len = buf + sizeof(buf) - p;
    for (; len < width; --width) {
        ctx.str[ctx.off++] = fill_ch;
    }
    do {
        ctx.str[ctx.off++] = *p++;
    } while (p != buf + sizeof(buf));
    return ctx;
}

static inline char *_qrintf_lld_core(char *p, long long v)
{
    if (v < 0) {
        if (v == LLONG_MIN) {
            *--p = '1' + LLONG_MAX % 10;
            v = LLONG_MAX / 10;
        } else {
            v = -v;
        }
    }
    do {
        *--p = '0' + v % 10;
    } while ((v /= 10) != 0);
    return p;
}

static inline qrintf_nck_t _qrintf_nck_lld(qrintf_nck_t ctx, long long v)
{
    char buf[sizeof(long long) * 3], *p;
    if (v < 0) {
        ctx.str[ctx.off++] = '-';
    }
    p = _qrintf_lld_core(buf + sizeof(buf), v);
    do {
        ctx.str[ctx.off++] = *p++;
    } while (p != buf + sizeof(buf));
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_lld(qrintf_nck_t ctx, int fill_ch, int width, long long v)
{
    char buf[sizeof(long long) * 3 + 1], *p = _qrintf_lld_core(buf + sizeof(buf), v);
    int len;
    if (v < 0) {
        if (fill_ch == ' ') {
            *--p = '-';
        } else {
            ctx.str[ctx.off++] = '-';
            --width;
        }
    }
    len = buf + sizeof(buf) - p;
    for (; len < width; --width) {
        ctx.str[ctx.off++] = fill_ch;
    }
    do {
        ctx.str[ctx.off++] = *p++;
    } while (p != buf + sizeof(buf));
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_hu(qrintf_nck_t ctx, unsigned short v)
{
    char tmp[sizeof(unsigned short) * 3], *p = tmp + sizeof(tmp);
    do {
        *--p = '0' + v % 10;
    } while ((v /= 10) != 0);
    do {
        ctx.str[ctx.off++] = *p++;
    } while (p != tmp + sizeof(tmp));
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_u(qrintf_nck_t ctx, unsigned v)
{
    char tmp[sizeof(unsigned) * 3], *p = tmp + sizeof(tmp);
    do {
        *--p = '0' + v % 10;
    } while ((v /= 10) != 0);
    do {
        ctx.str[ctx.off++] = *p++;
    } while (p != tmp + sizeof(tmp));
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_lu(qrintf_nck_t ctx, unsigned long v)
{
    char tmp[sizeof(unsigned long) * 3], *p = tmp + sizeof(tmp);
    do {
        *--p = '0' + v % 10;
    } while ((v /= 10) != 0);
    do {
        ctx.str[ctx.off++] = *p++;
    } while (p != tmp + sizeof(tmp));
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_llu(qrintf_nck_t ctx, unsigned long long v)
{
    char tmp[sizeof(unsigned long long) * 3], *p = tmp + sizeof(tmp);
    do {
        *--p = '0' + v % 10;
    } while ((v /= 10) != 0);
    do {
        ctx.str[ctx.off++] = *p++;
    } while (p != tmp + sizeof(tmp));
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_zu(qrintf_nck_t ctx, size_t v)
{
    char tmp[sizeof(size_t) * 3], *p = tmp + sizeof(tmp);
    do {
        *--p = '0' + v % 10;
    } while ((v /= 10) != 0);
    do {
        ctx.str[ctx.off++] = *p++;
    } while (p != tmp + sizeof(tmp));
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_hu(qrintf_nck_t ctx, int fill_ch, int width, unsigned short v)
{
    char tmp[sizeof(unsigned short) * 3], *p = tmp + sizeof(tmp);
    do {
        *--p = '0' + v % 10;
    } while ((v /= 10) != 0);
    {
        int len = tmp + sizeof(tmp) - p;
        for (; len < width; --width) {
            ctx.str[ctx.off++] = fill_ch;
        }
    }
    do {
        ctx.str[ctx.off++] = *p++;
    } while (p != tmp + sizeof(tmp));
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_u(qrintf_nck_t ctx, int fill_ch, int width, unsigned v)
{
    char tmp[sizeof(unsigned) * 3], *p = tmp + sizeof(tmp);
    do {
        *--p = '0' + v % 10;
    } while ((v /= 10) != 0);
    {
        int len = tmp + sizeof(tmp) - p;
        for (; len < width; --width) {
            ctx.str[ctx.off++] = fill_ch;
        }
    }
    do {
        ctx.str[ctx.off++] = *p++;
    } while (p != tmp + sizeof(tmp));
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_lu(qrintf_nck_t ctx, int fill_ch, int width, unsigned long v)
{
    char tmp[sizeof(unsigned long) * 3], *p = tmp + sizeof(tmp);
    do {
        *--p = '0' + v % 10;
    } while ((v /= 10) != 0);
    {
        int len = tmp + sizeof(tmp) - p;
        for (; len < width; --width) {
            ctx.str[ctx.off++] = fill_ch;
        }
    }
    do {
        ctx.str[ctx.off++] = *p++;
    } while (p != tmp + sizeof(tmp));
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_llu(qrintf_nck_t ctx, int fill_ch, int width, unsigned long long v)
{
    char tmp[sizeof(unsigned long long) * 3], *p = tmp + sizeof(tmp);
    do {
        *--p = '0' + v % 10;
    } while ((v /= 10) != 0);
    {
        int len = tmp + sizeof(tmp) - p;
        for (; len < width; --width) {
            ctx.str[ctx.off++] = fill_ch;
        }
    }
    do {
        ctx.str[ctx.off++] = *p++;
    } while (p != tmp + sizeof(tmp));
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_zu(qrintf_nck_t ctx, int fill_ch, int width, size_t v)
{
    char tmp[sizeof(size_t) * 3], *p = tmp + sizeof(tmp);
    do {
        *--p = '0' + v % 10;
    } while ((v /= 10) != 0);
    {
        int len = tmp + sizeof(tmp) - p;
        for (; len < width; --width) {
            ctx.str[ctx.off++] = fill_ch;
        }
    }
    do {
        ctx.str[ctx.off++] = *p++;
    } while (p != tmp + sizeof(tmp));
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_hx(qrintf_nck_t ctx, unsigned short v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned short) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned short) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = ("0123456789abcdef")[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_x(qrintf_nck_t ctx, unsigned v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = ("0123456789abcdef")[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_lx(qrintf_nck_t ctx, unsigned long v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned long) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned long) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = ("0123456789abcdef")[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_llx(qrintf_nck_t ctx, unsigned long long v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned long long) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned long long) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = ("0123456789abcdef")[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_zx(qrintf_nck_t ctx, size_t v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(size_t) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(size_t) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = ("0123456789abcdef")[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_hx(qrintf_nck_t ctx, int fill_ch, int width, unsigned short v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned short) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned short) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    for (; len < width; --width) {
        ctx.str[ctx.off++] = fill_ch;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = ("0123456789abcdef")[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_x(qrintf_nck_t ctx, int fill_ch, int width, unsigned v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    for (; len < width; --width) {
        ctx.str[ctx.off++] = fill_ch;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = ("0123456789abcdef")[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_lx(qrintf_nck_t ctx, int fill_ch, int width, unsigned long v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned long) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned long) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    for (; len < width; --width) {
        ctx.str[ctx.off++] = fill_ch;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = ("0123456789abcdef")[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_llx(qrintf_nck_t ctx, int fill_ch, int width, unsigned long long v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned long long) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned long long) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    for (; len < width; --width) {
        ctx.str[ctx.off++] = fill_ch;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = ("0123456789abcdef")[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_zx(qrintf_nck_t ctx, int fill_ch, int width, size_t v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(size_t) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(size_t) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    for (; len < width; --width) {
        ctx.str[ctx.off++] = fill_ch;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = ("0123456789abcdef")[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_hX(qrintf_nck_t ctx, unsigned short v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned short) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned short) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = ("0123456789ABCDEF")[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_X(qrintf_nck_t ctx, unsigned v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = ("0123456789ABCDEF")[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_lX(qrintf_nck_t ctx, unsigned long v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned long) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned long) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = ("0123456789ABCDEF")[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_llX(qrintf_nck_t ctx, unsigned long long v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned long long) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned long long) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = ("0123456789ABCDEF")[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_zX(qrintf_nck_t ctx, size_t v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(size_t) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(size_t) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = ("0123456789ABCDEF")[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_hX(qrintf_nck_t ctx, int fill_ch, int width, unsigned short v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned short) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned short) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    for (; len < width; --width) {
        ctx.str[ctx.off++] = fill_ch;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = ("0123456789ABCDEF")[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_X(qrintf_nck_t ctx, int fill_ch, int width, unsigned v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    for (; len < width; --width) {
        ctx.str[ctx.off++] = fill_ch;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = ("0123456789ABCDEF")[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_lX(qrintf_nck_t ctx, int fill_ch, int width, unsigned long v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned long) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned long) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    for (; len < width; --width) {
        ctx.str[ctx.off++] = fill_ch;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = ("0123456789ABCDEF")[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_llX(qrintf_nck_t ctx, int fill_ch, int width, unsigned long long v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned long long) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned long long) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    for (; len < width; --width) {
        ctx.str[ctx.off++] = fill_ch;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = ("0123456789ABCDEF")[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}

static inline qrintf_nck_t _qrintf_nck_width_zX(qrintf_nck_t ctx, int fill_ch, int width, size_t v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(size_t) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(size_t) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    for (; len < width; --width) {
        ctx.str[ctx.off++] = fill_ch;
    }
    len *= 4;
    do {
        len -= 4;
        ctx.str[ctx.off++] = ("0123456789ABCDEF")[(v >> len) & 0xf];
    } while (len != 0);
    return ctx;
}


static inline qrintf_chk_t _qrintf_chk_hd(qrintf_chk_t ctx, short v)
{
    char buf[sizeof(short) * 3], *p;
    if (v < 0) {
        do { int ch = '-'; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    }
    p = _qrintf_hd_core(buf + sizeof(buf), v);
    do {
        do { int ch = *p++; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (p != buf + sizeof(buf));
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_hd(qrintf_chk_t ctx, int fill_ch, int width, short v)
{
    char buf[sizeof(short) * 3 + 1], *p = _qrintf_hd_core(buf + sizeof(buf), v);
    int len;
    if (v < 0) {
        if (fill_ch == ' ') {
            *--p = '-';
        } else {
            do { int ch = '-'; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
            --width;
        }
    }
    len = buf + sizeof(buf) - p;
    for (; len < width; --width) {
        do { int ch = fill_ch; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    }
    do {
        do { int ch = *p++; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (p != buf + sizeof(buf));
    return ctx;
}


static inline qrintf_chk_t _qrintf_chk_d(qrintf_chk_t ctx, int v)
{
    char buf[sizeof(int) * 3], *p;
    if (v < 0) {
        do { int ch = '-'; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    }
    p = _qrintf_d_core(buf + sizeof(buf), v);
    do {
        do { int ch = *p++; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (p != buf + sizeof(buf));
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_d(qrintf_chk_t ctx, int fill_ch, int width, int v)
{
    char buf[sizeof(int) * 3 + 1], *p = _qrintf_d_core(buf + sizeof(buf), v);
    int len;
    if (v < 0) {
        if (fill_ch == ' ') {
            *--p = '-';
        } else {
            do { int ch = '-'; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
            --width;
        }
    }
    len = buf + sizeof(buf) - p;
    for (; len < width; --width) {
        do { int ch = fill_ch; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    }
    do {
        do { int ch = *p++; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (p != buf + sizeof(buf));
    return ctx;
}


static inline qrintf_chk_t _qrintf_chk_ld(qrintf_chk_t ctx, long v)
{
    char buf[sizeof(long) * 3], *p;
    if (v < 0) {
        do { int ch = '-'; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    }
    p = _qrintf_ld_core(buf + sizeof(buf), v);
    do {
        do { int ch = *p++; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (p != buf + sizeof(buf));
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_ld(qrintf_chk_t ctx, int fill_ch, int width, long v)
{
    char buf[sizeof(long) * 3 + 1], *p = _qrintf_ld_core(buf + sizeof(buf), v);
    int len;
    if (v < 0) {
        if (fill_ch == ' ') {
            *--p = '-';
        } else {
            do { int ch = '-'; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
            --width;
        }
    }
    len = buf + sizeof(buf) - p;
    for (; len < width; --width) {
        do { int ch = fill_ch; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    }
    do {
        do { int ch = *p++; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (p != buf + sizeof(buf));
    return ctx;
}


static inline qrintf_chk_t _qrintf_chk_lld(qrintf_chk_t ctx, long long v)
{
    char buf[sizeof(long long) * 3], *p;
    if (v < 0) {
        do { int ch = '-'; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    }
    p = _qrintf_lld_core(buf + sizeof(buf), v);
    do {
        do { int ch = *p++; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (p != buf + sizeof(buf));
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_lld(qrintf_chk_t ctx, int fill_ch, int width, long long v)
{
    char buf[sizeof(long long) * 3 + 1], *p = _qrintf_lld_core(buf + sizeof(buf), v);
    int len;
    if (v < 0) {
        if (fill_ch == ' ') {
            *--p = '-';
        } else {
            do { int ch = '-'; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
            --width;
        }
    }
    len = buf + sizeof(buf) - p;
    for (; len < width; --width) {
        do { int ch = fill_ch; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    }
    do {
        do { int ch = *p++; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (p != buf + sizeof(buf));
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_hu(qrintf_chk_t ctx, unsigned short v)
{
    char tmp[sizeof(unsigned short) * 3], *p = tmp + sizeof(tmp);
    do {
        *--p = '0' + v % 10;
    } while ((v /= 10) != 0);
    do {
        do { int ch = *p++; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (p != tmp + sizeof(tmp));
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_u(qrintf_chk_t ctx, unsigned v)
{
    char tmp[sizeof(unsigned) * 3], *p = tmp + sizeof(tmp);
    do {
        *--p = '0' + v % 10;
    } while ((v /= 10) != 0);
    do {
        do { int ch = *p++; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (p != tmp + sizeof(tmp));
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_lu(qrintf_chk_t ctx, unsigned long v)
{
    char tmp[sizeof(unsigned long) * 3], *p = tmp + sizeof(tmp);
    do {
        *--p = '0' + v % 10;
    } while ((v /= 10) != 0);
    do {
        do { int ch = *p++; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (p != tmp + sizeof(tmp));
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_llu(qrintf_chk_t ctx, unsigned long long v)
{
    char tmp[sizeof(unsigned long long) * 3], *p = tmp + sizeof(tmp);
    do {
        *--p = '0' + v % 10;
    } while ((v /= 10) != 0);
    do {
        do { int ch = *p++; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (p != tmp + sizeof(tmp));
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_zu(qrintf_chk_t ctx, size_t v)
{
    char tmp[sizeof(size_t) * 3], *p = tmp + sizeof(tmp);
    do {
        *--p = '0' + v % 10;
    } while ((v /= 10) != 0);
    do {
        do { int ch = *p++; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (p != tmp + sizeof(tmp));
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_hu(qrintf_chk_t ctx, int fill_ch, int width, unsigned short v)
{
    char tmp[sizeof(unsigned short) * 3], *p = tmp + sizeof(tmp);
    do {
        *--p = '0' + v % 10;
    } while ((v /= 10) != 0);
    {
        int len = tmp + sizeof(tmp) - p;
        for (; len < width; --width) {
            do { int ch = fill_ch; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
        }
    }
    do {
        do { int ch = *p++; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (p != tmp + sizeof(tmp));
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_u(qrintf_chk_t ctx, int fill_ch, int width, unsigned v)
{
    char tmp[sizeof(unsigned) * 3], *p = tmp + sizeof(tmp);
    do {
        *--p = '0' + v % 10;
    } while ((v /= 10) != 0);
    {
        int len = tmp + sizeof(tmp) - p;
        for (; len < width; --width) {
            do { int ch = fill_ch; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
        }
    }
    do {
        do { int ch = *p++; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (p != tmp + sizeof(tmp));
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_lu(qrintf_chk_t ctx, int fill_ch, int width, unsigned long v)
{
    char tmp[sizeof(unsigned long) * 3], *p = tmp + sizeof(tmp);
    do {
        *--p = '0' + v % 10;
    } while ((v /= 10) != 0);
    {
        int len = tmp + sizeof(tmp) - p;
        for (; len < width; --width) {
            do { int ch = fill_ch; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
        }
    }
    do {
        do { int ch = *p++; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (p != tmp + sizeof(tmp));
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_llu(qrintf_chk_t ctx, int fill_ch, int width, unsigned long long v)
{
    char tmp[sizeof(unsigned long long) * 3], *p = tmp + sizeof(tmp);
    do {
        *--p = '0' + v % 10;
    } while ((v /= 10) != 0);
    {
        int len = tmp + sizeof(tmp) - p;
        for (; len < width; --width) {
            do { int ch = fill_ch; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
        }
    }
    do {
        do { int ch = *p++; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (p != tmp + sizeof(tmp));
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_zu(qrintf_chk_t ctx, int fill_ch, int width, size_t v)
{
    char tmp[sizeof(size_t) * 3], *p = tmp + sizeof(tmp);
    do {
        *--p = '0' + v % 10;
    } while ((v /= 10) != 0);
    {
        int len = tmp + sizeof(tmp) - p;
        for (; len < width; --width) {
            do { int ch = fill_ch; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
        }
    }
    do {
        do { int ch = *p++; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (p != tmp + sizeof(tmp));
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_hx(qrintf_chk_t ctx, unsigned short v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned short) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned short) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = ("0123456789abcdef")[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_x(qrintf_chk_t ctx, unsigned v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = ("0123456789abcdef")[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_lx(qrintf_chk_t ctx, unsigned long v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned long) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned long) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = ("0123456789abcdef")[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_llx(qrintf_chk_t ctx, unsigned long long v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned long long) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned long long) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = ("0123456789abcdef")[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_zx(qrintf_chk_t ctx, size_t v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(size_t) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(size_t) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = ("0123456789abcdef")[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_hx(qrintf_chk_t ctx, int fill_ch, int width, unsigned short v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned short) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned short) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    for (; len < width; --width) {
        do { int ch = fill_ch; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = ("0123456789abcdef")[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_x(qrintf_chk_t ctx, int fill_ch, int width, unsigned v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    for (; len < width; --width) {
        do { int ch = fill_ch; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = ("0123456789abcdef")[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_lx(qrintf_chk_t ctx, int fill_ch, int width, unsigned long v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned long) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned long) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    for (; len < width; --width) {
        do { int ch = fill_ch; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = ("0123456789abcdef")[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_llx(qrintf_chk_t ctx, int fill_ch, int width, unsigned long long v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned long long) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned long long) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    for (; len < width; --width) {
        do { int ch = fill_ch; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = ("0123456789abcdef")[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_zx(qrintf_chk_t ctx, int fill_ch, int width, size_t v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(size_t) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(size_t) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    for (; len < width; --width) {
        do { int ch = fill_ch; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = ("0123456789abcdef")[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_hX(qrintf_chk_t ctx, unsigned short v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned short) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned short) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = ("0123456789ABCDEF")[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_X(qrintf_chk_t ctx, unsigned v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = ("0123456789ABCDEF")[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_lX(qrintf_chk_t ctx, unsigned long v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned long) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned long) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = ("0123456789ABCDEF")[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_llX(qrintf_chk_t ctx, unsigned long long v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned long long) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned long long) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = ("0123456789ABCDEF")[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_zX(qrintf_chk_t ctx, size_t v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(size_t) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(size_t) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = ("0123456789ABCDEF")[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_hX(qrintf_chk_t ctx, int fill_ch, int width, unsigned short v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned short) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned short) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    for (; len < width; --width) {
        do { int ch = fill_ch; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = ("0123456789ABCDEF")[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_X(qrintf_chk_t ctx, int fill_ch, int width, unsigned v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    for (; len < width; --width) {
        do { int ch = fill_ch; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = ("0123456789ABCDEF")[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_lX(qrintf_chk_t ctx, int fill_ch, int width, unsigned long v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned long) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned long) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    for (; len < width; --width) {
        do { int ch = fill_ch; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = ("0123456789ABCDEF")[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_llX(qrintf_chk_t ctx, int fill_ch, int width, unsigned long long v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(unsigned long long) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(unsigned long long) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    for (; len < width; --width) {
        do { int ch = fill_ch; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = ("0123456789ABCDEF")[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}

static inline qrintf_chk_t _qrintf_chk_width_zX(qrintf_chk_t ctx, int fill_ch, int width, size_t v)
{
    int len;
    if (v != 0) {
        int bits;
        if (sizeof(size_t) == sizeof(unsigned long long))
            bits = sizeof(unsigned long long) * 8 - __builtin_clzll(v);
        else if (sizeof(size_t) == sizeof(unsigned long))
            bits = sizeof(unsigned long) * 8 - __builtin_clzl(v);
        else
            bits = sizeof(int) * 8 - __builtin_clz(v);
        len = (bits + 3) >> 2;
    } else {
        len = 1;
    }
    for (; len < width; --width) {
        do { int ch = fill_ch; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    }
    len *= 4;
    do {
        len -= 4;
        do { int ch = ("0123456789ABCDEF")[(v >> len) & 0xf]; if (ctx.off < ctx.size) ctx.str[ctx.off] = ch; ++ctx.off; } while (0);
    } while (len != 0);
    return ctx;
}


#ifdef __cplusplus
}
#endif

#endif
