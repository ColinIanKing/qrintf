#! /usr/bin/perl

# Copyright (c) 2014 DeNA Co., Ltd.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

use strict;
use warnings;

my $re_paren;
$re_paren = qr {
    \(
    (?:
        (?>[^\(\)]+)
        | (??{ $re_paren })
    )*
    \)
}xs;
my $re_arg = qr { (?:$re_paren|[^,]*) }xs;

my $src = join '', <STDIN>;

$src =~ s{
    (?:(?<=[^A-Za-z0-9_])|^)
    (
        (?:s|_qp_s)printf
        (\s* \( \s*)
        ($re_arg)
        (\s*),
        (\s*)
        " ( (?:\\"|[^"]*)* ) "
        ( (?: \s* , \s* (?:$re_paren|[^),])+ )* )
        (\s* \))
    )|(
        _qp_sprintf(?![A-Za-z0-9_])
    )
}{ $9 ? "sprintf" : rewrite_sprintf($1, $2, $3, $4, $5, $6, $7, $8) }gxse;

print $src;

sub rewrite_sprintf {
    my ($orig, $start_brace, $dst, $space_after_dst, $space_before_fmt, $fmt, $values, $end_brace) = @_;

    $orig =~ s/^_qp_//; # _qp_sprintf => sprinf

    # parse values
    my @values = ( $values =~ m{ ( \s* , \s* (?:$re_paren|[^),])+ ) }gxs )
        or return $orig;

    # build the expr
    my $expr = "_qrintf_init($dst)$space_after_dst$space_before_fmt";
    for my $token (split /(%-?0?(?:[0-9]+|\*|)(?:(?:h||l|ll|z)u|(?:h||l|ll)[di]|s|c))/, $fmt) {
        if ($token =~ /^%(.*)$/) {
            my ($left_adjust, $zero_pad, $width, $conv) = ($token =~ /^%(-?)(0?)([0-9]+|\*|)(.*)$/)
                or die "failed to parse token: $token";
            $conv =~ s/i$/d/s; # convert %?i to %?d
            if ($width ne '') {
                if ($width eq '*') {
                    $width = shift @values;
                } else {
                    $width =~ s/^0//g; # remove preceeding zeros so that it would not be considered as an octal
                    $width = ", $width";
                }
                my $pad_ch = $zero_pad ne '' ? '0' : ' ';
                $expr = "_qrintf_width_$conv($expr, '$pad_ch'$width" . shift(@values) . ")";
            } else {
                $expr = "_qrintf_$conv($expr" . shift(@values) . ")";
            }
        } elsif ($token ne '') {
            if ($token =~ /%[^%]/) {
                return $orig;
            }
            $token =~ s/%%/%/g;
            if (length $token == 1) {
                $expr = qq{_qrintf_c($expr, '$token')};
            } else {
                $expr = qq{_qrintf_s_len($expr, "$token", sizeof("$token") - 1)};
            }
        }
    }
    $expr = "_qrintf_finalize$start_brace$expr$end_brace";

    return $expr;
}
