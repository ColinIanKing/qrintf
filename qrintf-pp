#! /usr/bin/perl

# Copyright (c) 2014 DeNA Co., Ltd.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

use strict;
use warnings;

my $re_paren;
$re_paren = qr {
    \(
    (?:
        (?>[^\(\)]+)
        | (??{ $re_paren })
    )*
    \)
}xs;
my $re_arg = qr { (?:$re_paren|[^,]*) }xs;

my $src = join '', <STDIN>;

$src =~ s{
    (?:(?<=[^A-Za-z0-9_])|^)
    (
        [sq]printf
        (\s* \( \s*)
        ($re_arg)
        (\s*),
        (\s*)
        " ( (?:\\"|[^"]*)* ) "
        ( (?: \s* , \s* (?:$re_paren|[^),])+ )* )
        (\s* \))
    )
}{ rewrite_sprintf($1, $2, $3, $4, $5, $6, $7, $8) }gxse;

print $src;

sub rewrite_sprintf {
    my ($orig, $start_brace, $dst, $space_after_dst, $space_before_fmt, $fmt, $values, $end_brace) = @_;

    # check if the only used formats are the ones that can be optimized
    $fmt =~ m{^(%[dusc%]|[^%])*$}
        or return 's' . substr $orig, 1;

    # parse values
    my @values = ( $values =~ m{ ( \s* , \s* (?:$re_paren|[^),])+ ) }gxs )
        or return 's' . substr $orig, 1;

    # build the expr
    my $expr = "_qrintf_init$start_brace$dst)$space_after_dst$space_before_fmt";
    for my $token (split /(%(?:(?:h||l|ll|z)u|(?:h||l|ll)d|s|c))/, $fmt) {
        if ($token =~ /^%(.*)$/) {
            $expr = "_qrintf_$1($expr" . shift(@values) . ")";
        } elsif ($token ne '') {
            $token =~ s/%%/%/g;
            if (length $token == 1) {
                $expr = qq{_qrintf_c($expr, '$token')};
            } else {
                $expr = qq{_qrintf_s_len($expr, "$token", sizeof("$token") - 1)};
            }
        }
    }
    $expr = "((int)($expr).off$end_brace";

    return $expr;
}
